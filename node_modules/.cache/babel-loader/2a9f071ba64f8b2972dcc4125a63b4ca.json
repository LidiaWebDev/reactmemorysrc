{"ast":null,"code":"import _classCallCheck from \"/Users/lidiadavidson/Documents/react-memorygame/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/lidiadavidson/Documents/react-memorygame/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/lidiadavidson/Documents/react-memorygame/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/lidiadavidson/Documents/react-memorygame/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/lidiadavidson/Documents/react-memorygame/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/Users/lidiadavidson/Documents/react-memorygame/src/App.js\";\n// imports\nimport React, { Component } from \"react\";\nimport ImageFileNames from \"./dogs\";\nimport Navbar from \"./components/navbar\";\nimport Banner from \"./components/banner\";\nimport ImageBlockListing from \"./components/images\";\nimport Footer from \"./components/footer\"; // component - state\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App() {\n    var _getPrototypeOf2;\n\n    var _this;\n\n    _classCallCheck(this, App);\n\n    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(App)).call.apply(_getPrototypeOf2, [this].concat(args)));\n    _this.state = {\n      imageFileNames: ImageFileNames,\n      clickedImages: [],\n      score: 0,\n      topScore: 0,\n      feedback: \"Click an image to begin!\",\n      gameStatus: 0 //gameStatus: 0 => game in progresss, 1 => game won, 2 => game lost\n\n    };\n\n    _this.handleClick = function (event) {\n      var clickedImageFileName = event.target.alt;\n\n      var wasImageClickedBefore = _this.imageClickedBefore(clickedImageFileName);\n\n      if (wasImageClickedBefore) {\n        _this.setState({\n          imageFileNames: _this.shuffle(_this.state.imageFileNames),\n          clickedImages: [],\n          score: 0,\n          feedback: \"Game Over! You clicked this image twice\",\n          gameStatus: 2\n        }, function () {});\n      } else {\n        var newScore = _this.state.score + 1;\n\n        if (newScore === _this.state.imageFileNames.length) {\n          _this.setState({\n            imageFileNames: _this.shuffle(_this.state.imageFileNames),\n            clickedImages: [],\n            score: 0,\n            topScore: newScore,\n            feedback: \"CONGRATULATIONS! YOU WON!!!\",\n            gameStatus: 1\n          });\n        } else {\n          var clickedImagesCopy = _this.state.clickedImages.slice();\n\n          clickedImagesCopy.push(clickedImageFileName);\n          var newTopScore = newScore > _this.state.topScore ? newScore : _this.state.topScore;\n\n          _this.setState({\n            imageFileNames: _this.shuffle(_this.state.imageFileNames),\n            clickedImages: clickedImagesCopy,\n            score: newScore,\n            topScore: newTopScore,\n            feedback: \"You are doing great! all correct!\",\n            gameStatus: 0\n          }, function () {});\n        }\n      }\n    };\n\n    _this.imageClickedBefore = function (clickedImageFileName) {\n      for (var index = 0; index < _this.state.clickedImages.length; index++) {\n        if (_this.state.clickedImages[index] === clickedImageFileName) {\n          return true;\n        }\n      }\n\n      return false;\n    };\n\n    _this.shuffle = function (array) {\n      var currentIndex = array.length,\n          temporaryValue,\n          randomIndex;\n\n      while (0 !== currentIndex) {\n        randomIndex = Math.floor(Math.random() * currentIndex);\n        currentIndex -= 1;\n        temporaryValue = array[currentIndex];\n        array[currentIndex] = array[randomIndex];\n        array[randomIndex] = temporaryValue;\n      }\n\n      return array;\n    };\n\n    return _this;\n  }\n\n  _createClass(App, [{\n    key: \"componentDidMount\",\n    // componentDidMount\n    value: function componentDidMount() {\n      this.setState({\n        imageFileNames: this.shuffle(this.state.imageFileNames)\n      }, function () {\n        console.log(\"Shuffled the images on game start\");\n      });\n    } // handleClick\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 107\n        },\n        __self: this\n      }, React.createElement(Navbar, {\n        score: this.state.score,\n        topScore: this.state.topScore,\n        feedback: this.state.feedback,\n        gameStatus: this.state.gameStatus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), React.createElement(Banner, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }), React.createElement(ImageBlockListing, {\n        imageFileNames: this.state.imageFileNames,\n        clickHandler: this.handleClick,\n        gameStatus: this.state.gameStatus,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(Footer, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/Users/lidiadavidson/Documents/react-memorygame/src/App.js"],"names":["React","Component","ImageFileNames","Navbar","Banner","ImageBlockListing","Footer","App","state","imageFileNames","clickedImages","score","topScore","feedback","gameStatus","handleClick","event","clickedImageFileName","target","alt","wasImageClickedBefore","imageClickedBefore","setState","shuffle","newScore","length","clickedImagesCopy","slice","push","newTopScore","index","array","currentIndex","temporaryValue","randomIndex","Math","floor","random","console","log"],"mappings":"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","sourcesContent":["// imports\nimport React, { Component } from \"react\";\nimport ImageFileNames from \"./dogs\";\nimport Navbar from \"./components/navbar\";\nimport Banner from \"./components/banner\";\nimport ImageBlockListing from \"./components/images\";\nimport Footer from \"./components/footer\";\n// component - state\nclass App extends Component {\n  state = {\n    imageFileNames: ImageFileNames,\n    clickedImages: [],\n    score: 0,\n    topScore: 0,\n    feedback: \"Click an image to begin!\",\n    gameStatus: 0 //gameStatus: 0 => game in progresss, 1 => game won, 2 => game lost\n  };\n  // componentDidMount\n  componentDidMount() {\n    this.setState(\n      {\n        imageFileNames: this.shuffle(this.state.imageFileNames)\n      },\n      () => {\n        console.log(\"Shuffled the images on game start\");\n      }\n    );\n  }\n  // handleClick\n\n  handleClick = event => {\n    const clickedImageFileName = event.target.alt;\n\n    const wasImageClickedBefore = this.imageClickedBefore(clickedImageFileName);\n    if (wasImageClickedBefore) {\n      this.setState(\n        {\n          imageFileNames: this.shuffle(this.state.imageFileNames),\n\n          clickedImages: [],\n          score: 0,\n          feedback: \"Game Over! You clicked this image twice\",\n          gameStatus: 2\n        },\n        () => {}\n      );\n    } else {\n      let newScore = this.state.score + 1;\n      if (newScore === this.state.imageFileNames.length) {\n        this.setState({\n          imageFileNames: this.shuffle(this.state.imageFileNames),\n\n          clickedImages: [],\n          score: 0,\n          topScore: newScore,\n          feedback: \"CONGRATULATIONS! YOU WON!!!\",\n          gameStatus: 1\n        });\n      } else {\n        const clickedImagesCopy = this.state.clickedImages.slice();\n        clickedImagesCopy.push(clickedImageFileName);\n        const newTopScore =\n          newScore > this.state.topScore ? newScore : this.state.topScore;\n        this.setState(\n          {\n            imageFileNames: this.shuffle(this.state.imageFileNames),\n\n            clickedImages: clickedImagesCopy,\n            score: newScore,\n            topScore: newTopScore,\n            feedback: \"You are doing great! all correct!\",\n            gameStatus: 0\n          },\n          () => {}\n        );\n      }\n    }\n  };\n\n  imageClickedBefore = clickedImageFileName => {\n    for (let index = 0; index < this.state.clickedImages.length; index++) {\n      if (this.state.clickedImages[index] === clickedImageFileName) {\n        return true;\n      }\n    }\n    return false;\n  };\n\n  shuffle = array => {\n    var currentIndex = array.length,\n      temporaryValue,\n      randomIndex;\n\n    while (0 !== currentIndex) {\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      temporaryValue = array[currentIndex];\n      array[currentIndex] = array[randomIndex];\n      array[randomIndex] = temporaryValue;\n    }\n    return array;\n  };\n\n  render() {\n    return (\n      <div>\n        <Navbar\n          score={this.state.score}\n          topScore={this.state.topScore}\n          feedback={this.state.feedback}\n          gameStatus={this.state.gameStatus}\n        />\n        <Banner />\n        <ImageBlockListing\n          imageFileNames={this.state.imageFileNames}\n          clickHandler={this.handleClick}\n          gameStatus={this.state.gameStatus}\n        />\n        <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}